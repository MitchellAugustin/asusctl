import { ValueBar } from "../common_widgets.slint";
import { Theme } from "../globals.slint";
import { HorizontalBox , VerticalBox, ScrollView, Slider} from "std-widgets.slint";

export struct AvailableSystemProperties {
    charge_limit: bool,
    panel_od: bool,
    mini_led_mode: bool,
    disable_nvidia_powerd_on_battery: bool,
    ac_command: bool,
    bat_command: bool,
    throttle_policy: bool,
    ppt_pl1_spl: bool,
    ppt_pl2_sppt: bool,
    ppt_fppt: bool,
    ppt_apu_sppt: bool,
    ppt_platform_sppt: bool,
    nv_dynamic_boost: bool,
    nv_temp_target: bool,
}

export struct SystemValues {
    charge_limit: int,
    last_charge_limit: int,
    panel_od: bool,
    mini_led_mode: bool,
    disable_nvidia_powerd_on_battery: bool,
}

export global SystemPage {
    in-out property <int> charge-limit;
    callback set_charge(/* charge limit */ int, /* last limit */ int);
    in-out property <AvailableSystemProperties> available;
    in-out property <SystemValues> values;
}

export component PageSystem inherits Rectangle {
    background: Theme.background-color;
    ScrollView {
        VerticalLayout {
            // padding: 10px;
            spacing: 10px;
            min-height: root.height;
            if SystemPage.available.charge-limit: Rectangle {
                background: Theme.background-color;
                VerticalBox {
                    Text {
                        color: Theme.text-foreground-color;
                        text: @tr("ChargeMode" => "Charging mode");
                    }

                    Text {
                        color: Theme.text-foreground-color;
                        text: @tr("ChargeLimit" => "Charge limit");
                    }

                    charge_slider := Slider {
                        value: SystemPage.values.charge_limit;
                        changed => {
                            if SystemPage.values.last_charge_limit != charge_slider.value {
                                SystemPage.set_charge(charge_slider.value, SystemPage.values.last_charge_limit);
                                SystemPage.values.last_charge_limit = charge_slider.value;
                            }
                        }
                    }
                }
            }

            if SystemPage.available.panel-od: Rectangle {
                background: Theme.background-color;
                VerticalBox {
                    Text {
                        color: Theme.text-foreground-color;
                        text: @tr("PanelOverdrive" => "Panel Overdrive");
                    }

                    Text {
                        color: Theme.text-foreground-color;
                        text: @tr("PerformanceProfile" => "Performance Profile");
                    }
                }
            }

            Rectangle {
                background: Theme.background-color;
                VerticalBox {
                    Text {
                        color: Theme.text-foreground-color;
                        text: @tr("nv_dynamic_boost" => "nv_dynamic_boost");
                    }

                    Text {
                        color: Theme.text-foreground-color;
                        text: @tr("nv_temp_target" => "nv_temp_target");
                    }

                    Text {
                        color: Theme.text-foreground-color;
                        text: @tr("ppt_pl1_spl" => "ppt_pl1_spl");
                    }

                    Text {
                        color: Theme.text-foreground-color;
                        text: @tr("ppt_pl2_sppt" => "ppt_pl2_sppt");
                    }
                }
            }

            Rectangle {
                background: Theme.background-color;
                VerticalBox {
                    Text {
                        color: Theme.text-foreground-color;
                        text: @tr("PanelOverdrive" => "Panel Overdrive");
                    }

                    Text {
                        color: Theme.text-foreground-color;
                        text: @tr("PerformanceProfile" => "Performance Profile");
                    }
                }
            }

            Rectangle {
                background: Theme.background-color;
                VerticalBox {
                    Text {
                        color: Theme.text-foreground-color;
                        text: @tr("PanelOverdrive" => "Panel Overdrive");
                    }

                    Text {
                        color: Theme.text-foreground-color;
                        text: @tr("PerformanceProfile" => "Performance Profile");
                    }
                }
            }

            Rectangle {
                background: Theme.background-color;
                VerticalBox {
                    Text {
                        color: Theme.text-foreground-color;
                        text: @tr("PanelOverdrive" => "Panel Overdrive");
                    }

                    Text {
                        color: Theme.text-foreground-color;
                        text: @tr("PerformanceProfile" => "Performance Profile");
                    }
                }
            }
        }
    }
}
