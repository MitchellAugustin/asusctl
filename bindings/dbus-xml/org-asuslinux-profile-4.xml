method return time=1687861003.328608 sender=:1.463 -> destination=:1.473 serial=12 reply_serial=2
   string "
<!DOCTYPE node PUBLIC "-//freedesktop//DTD D-BUS Object Introspection 1.0//EN"
 "http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">
<node>
  <interface name="org.freedesktop.DBus.Properties">
    <method name="Get">
      <arg name="interface_name" type="s" direction="in"/>
      <arg name="property_name" type="s" direction="in"/>
      <arg type="v" direction="out"/>
    </method>
    <method name="Set">
      <arg name="interface_name" type="s" direction="in"/>
      <arg name="property_name" type="s" direction="in"/>
      <arg name="value" type="v" direction="in"/>
    </method>
    <method name="GetAll">
      <arg name="interface_name" type="s" direction="in"/>
      <arg type="a{sv}" direction="out"/>
    </method>
    <!--
     Emits the `org.freedesktop.DBus.Properties.PropertiesChanged` signal.
     -->
    <signal name="PropertiesChanged">
      <arg name="interface_name" type="s"/>
      <arg name="changed_properties" type="a{sv}"/>
      <arg name="invalidated_properties" type="as"/>
    </signal>
  </interface>
  <interface name="org.asuslinux.Daemon">
    <!--
     Fetch profile names
     -->
    <method name="Profiles">
      <arg type="as" direction="out"/>
    </method>
    <!--
     Toggle to next platform_profile. Names provided by `Profiles`.
     If fan-curves are supported will also activate a fan curve for profile.
     -->
    <method name="NextProfile">
    </method>
    <!--
     Fetch the active profile name
     -->
    <method name="ActiveProfile">
      <arg type="s" direction="out"/>
    </method>
    <!--
     Set this platform_profile name as active
     -->
    <method name="SetActiveProfile">
      <arg name="profile" type="s" direction="in"/>
    </method>
    <!--
     Get a list of profiles that have fan-curves enabled.
     -->
    <method name="EnabledFanProfiles">
      <arg type="as" direction="out"/>
    </method>
    <!--
     Set a profile fan curve enabled status. Will also activate a fan curve
     if in the same profile mode
     -->
    <method name="SetFanCurveEnabled">
      <arg name="profile" type="s" direction="in"/>
      <arg name="enabled" type="b" direction="in"/>
    </method>
    <!--
     Get the fan-curve data for the currently active Profile
     -->
    <method name="FanCurveData">
      <arg name="profile" type="s" direction="in"/>
      <arg type="(b(s(yyyyyyyy)(yyyyyyyy))(s(yyyyyyyy)(yyyyyyyy)))" direction="out"/>
    </method>
    <!--
     Set the fan curve for the specified profile.
     Will also activate the fan curve if the user is in the same mode.
     -->
    <method name="SetFanCurve">
      <arg name="profile" type="s" direction="in"/>
      <arg name="curve" type="(s(yyyyyyyy)(yyyyyyyy))" direction="in"/>
    </method>
    <!--
     Reset the stored (self) and device curve to the defaults of the
     platform.

     Each platform_profile has a different default and the defualt can be
     read only for the currently active profile.
     -->
    <method name="SetActiveCurveToDefaults">
    </method>
    <!--
     Reset the stored (self) and device curve to the defaults of the
     platform.

     Each platform_profile has a different default and the defualt can be
     read only for the currently active profile.
     -->
    <method name="ResetProfileCurves">
      <arg name="profile" type="s" direction="in"/>
    </method>
    <signal name="NotifyProfile">
      <arg name="profile" type="s"/>
    </signal>
  </interface>
  <interface name="org.freedesktop.DBus.Introspectable">
    <method name="Introspect">
      <arg type="s" direction="out"/>
    </method>
  </interface>
  <interface name="org.freedesktop.DBus.Peer">
    <method name="Ping">
    </method>
    <method name="GetMachineId">
      <arg type="s" direction="out"/>
    </method>
  </interface>
</node>
"
